event = {
    subtype_one = blessing_no
    subtype_one = blessing_none
    subtype_two = blessing_yes

    test_ship = blessing_yes
    blessing_yes = {

    }
    simple_no_scope = {

    }
    test_ship = simple_no_scope

    ## Test value links
    set_test_value = test_value

    test_value = {

    }
    test_ship = test_value

    ## Test prefixed value link
    test:test_value = {

    }
    test_ship = test:test_value

    ## Test enum links
    enum_one = {

    }
    test_ship = enum_two

    ## Test scope errors
    simple_with_scope = {
        #error
        simple_with_scope = {
        }
    }

    simple_no_scope = {
        #error
        scope:test_value = {

        }
    }
    
    ## Test completion
    #@ 15 simple_with_scope
    test_ship = simple_with_scope
    #@ 15 simple_with_scope
    #@? 35 simple_with_scope
    #@ 55 simple_with_scope
    #@! 55 trigger:num_moons
    test_ship = simple_with_scope.simple_back_scope.simple_with_scope
    
    trigger = {
        ### Test trigger RHS values
        
        ## Test absence of trigger prefix
        #error
        num_moons = num_moons
        #error
        num_moons = THIS.num_moons
        
        ## Test trigger prefix
        num_moons = THIS.trigger:num_moons
        ##@ 15 trigger:num_moons
        num_moons = trigger:num_moons
        
        ## Test non-comparable trigger
        #error
        num_moons_no_compare = num_moons_no_compare
        #error
        num_moons_no_compare = THIS.num_moons_no_compare
        #error
        num_moons_no_compare = trigger:num_moons_no_compare
        #error
        num_moons_no_compare = THIS.trigger:num_moons_no_compare
        
        ## Test incorrect scope
        #error 
        num_moons = ROOT.trigger:num_moons
        
        ## Test stellaris trigger scope magic
        #error
        num_moons = ROOT
        num_moons = THIS
        
        
        ## Test error message text
        nested_trigger = {
            #error
            value = ROOT.trigger:num_moons
        }
    }

}
